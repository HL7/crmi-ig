{
  "resourceType" : "OperationDefinition",
  "id" : "crmi-valueset-validate-code",
  "url" : "http://hl7.org/fhir/uv/crmi/OperationDefinition/crmi-valueset-validate-code",
  "name" : "CRMIValidateCode",
  "title" : "CRMI Extension of Value Set based Validation",
  "status" : "active",
  "kind" : "operation",
  "experimental" : false,
  "description" : "Validate that a coded value is in the set of codes allowed by a value set.\n\nIf the operation is not called at the instance level, one of the in parameters url, context or valueSet must be provided.  One (and only one) of the in parameters code, coding, or codeableConcept must be provided. If a code is provided, either a system or inferSystem **SHOULD** be provided. The operation returns a result (true / false), an error message, and the recommended display for the code. When validating a code or a coding, then the code, system and version output parameters **SHOULD** be populated when possible. When a validating a CodeableConcept, then the codeableConcept output parameter **SHOULD** be populated when possible.\n\nThis CRMI Extension adds support for providing value set versions, as well as the use of a manifest (parameters or library) to provide system and value set versions for references encountered during validation of the code.",
  "affectsState" : false,
  "code" : "validate-code",
  "comment" : "Note: the correct behavior of validation with regard to language for Coding.display items is currently undefined, and further development and testing may lead to specific requirements or recommendations in subsequent releases",
  "base": "http://hl7.org/fhir/OperationDefinition/ValueSet-validate-code",
  "resource" : ["ValueSet"],
  "system" : false,
  "type" : true,
  "instance" : true,
  "parameter" : [{
    "name" : "url",
    "use" : "in",
    "scope" : ["type"],
    "min" : 0,
    "max" : "1",
    "documentation" : "Value set Canonical URL. The server must know the value set (e.g. it is defined explicitly in the server's value sets, or it is defined implicitly by some code system known to the server",
    "type" : "uri"
  },
  {
    "name" : "context",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "The context of the value set, so that the server can resolve this to a value set to validate against. The recommended format for this URI is [Structure Definition URL]#[name or path into structure definition] e.g. http://hl7.org/fhir/StructureDefinition/observation-hspc-height-hspcheight#Observation.interpretation. Other forms may be used but are not defined. This form is only usable if the terminology server also has access to the conformance registry that the server is using, but can be used to delegate the mapping from an application context to a binding at run-time",
    "type" : "uri"
  },
  {
    "name" : "valueSet",
    "use" : "in",
    "scope" : ["type"],
    "min" : 0,
    "max" : "1",
    "documentation" : "The value set is provided directly as part of the request. Servers may choose not to accept value sets in this fashion. This parameter is used when the client wants the server to expand a value set that is not stored on the server",
    "type" : "ValueSet"
  },
  {
    "name" : "valueSetVersion",
    "use" : "in",
    "scope" : ["type"],
    "min" : 0,
    "max" : "1",
    "documentation" : "The identifier that is used to identify a specific version of the value set to be used when validating the code. This is an arbitrary value managed by the value set author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available.",
    "type" : "string"
  },
  {
    "name" : "code",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "The code that is to be validated. If a code is provided, a system or a context must be provided (if a context is provided, then the server SHALL ensure that the code is not ambiguous without a system)",
    "type" : "code"
  },
  {
    "name" : "system",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "The system for the code that is to be validated",
    "type" : "uri"
  },
  {
    "name" : "systemVersion",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "The version of the system, if one was provided in the source data",
    "type" : "string"
  },
  {
    "name" : "display",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "The display associated with the code, if provided. If a display is provided a code must be provided. If no display is provided, the server cannot validate the display value, but may choose to return a recommended display name using the display parameter in the outcome. Whether displays are case sensitive is code system dependent",
    "type" : "string"
  },
  {
    "name" : "coding",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "A coding to validate",
    "type" : "Coding"
  },
  {
    "name" : "codeableConcept",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "A full codeableConcept to validate. The server returns true if one of the coding values is in the value set, and may also validate that the codings are not in conflict with each other if more than one is present",
    "type" : "CodeableConcept"
  },
  {
    "name" : "date",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "The date for which the validation should be checked. Normally, this is the current conditions (which is the default values) but under some circumstances, systems need to validate that a correct code was used at some point in the past. A typical example of this would be where code selection is constrained to the set of codes that were available when the patient was treated, not when the record is being edited. Note that which date is appropriate is a matter for implementation policy.",
    "type" : "dateTime"
  },
  {
    "name" : "abstract",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "If this parameter has a value of true or the parameter is omitted, the client is stating that the validation is being performed in a context where a concept designated as 'abstract' is appropriate/allowed to be used, and the server should regard abstract codes as valid. If this parameter is false, abstract codes are not considered to be valid.\n\nNote that. 'abstract' is a property defined by many HL7 code systems that indicates that the concept is a logical grouping concept that is not intended to be used as a 'concrete' concept to in an actual patient/care/process record. This language is borrowed from object-orientated theory where 'abstract' entities are never instantiated. However in the general record and terminology eco-system, there are many contexts where it is appropriate to use these codes e.g. as decision making criterion, or when editing value sets themselves. This parameter allows a client to indicate to the server that it is working in such a context.",
    "type" : "boolean"
  },
  {
    "name" : "displayLanguage",
    "use" : "in",
    "min" : 0,
    "max" : "*",
    "documentation" : "Specifies the language for display validation.  Note: the display value only needs to match 1 displayLanguage in order for the validate operation to return true.",
    "type" : "code"
  },
  {
    "name" : "useSupplement",
    "use" : "in",
    "min" : 0,
    "max" : "*",
    "documentation" : "The supplement must be used when validating the code. Use of this parameter should result in $validate-code behaving the same way as if the supplements were included in the value set definition using the [http://hl7.org/fhir/StructureDefinition/valueset-supplement](https://build.fhir.org/ig/HL7/fhir-extensions/StructureDefinition-valueset-supplement.html)",
    "type" : "canonical"
  },
  {
    "name" : "lenient-display-validation",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "When the 'lenient-display-validation' parameter is true, an invalid display string will not cause the 'result' output parameter to be 'false'. If the 'lenient-display-validation' parameter is false or absent, then an invalid display will cause the 'result' output parameter to be 'false', i.e. the validation will fail.",
    "type" : "boolean"
  },
  {
    "name" : "valueset-membership-only",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "When 'true', the server will not perform the additional validation tasks beyond validating membership in the value set (e.g. the server won't check displays, etc.)",
    "type" : "boolean"
  },
  {
    "name" : "inferSystem",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "If true, the terminology server is required to infer the system from evaluation of the value set definition. The inferSystem parameter is only to be used with the code parameter, and not with the coding nor codeableConcept parameters.",
    "type" : "boolean"
  },
  {
    "name" : "default-valueset-version",
    "use" : "in",
    "min" : 0,
    "max" : "*",
    "documentation" : "Specifies a version to use for a valueset, if the reference to the value set does not specify which version to use. The format is the same as a canonical URL: [system]|[version] - e.g. http://example.org/ValueSet/example|1.0.0. Note that this is similar to the force-system-version parameter but applied to valuesets",
    "type" : "canonical"
  },
  {
    "name" : "check-valueset-version",
    "use" : "in",
    "min" : 0,
    "max" : "*",
    "documentation" : "Edge Case: Specifies a version to use for a valueset. If a reference to a value set specifies a different version, an error is returned instead of the expansion. The format is the same as a canonical URL: [system]|[version] - e.g. http://example.org/ValueSet/example|1.0.0. Note that this is similar to the force-system-version parameter but applied to valuesets",
    "type" : "canonical"
  },
  {
    "name" : "force-valueset-version",
    "use" : "in",
    "min" : 0,
    "max" : "*",
    "documentation" : "Edge Case: Specifies a version to use for a valueset. This parameter overrides any specified version in the reference to the value set (and any it depends on). The format is the same as a canonical URL: [system]|[version] - e.g. http://example.org/ValueSet/example|1.0.0. Note that this has obvious safety issues, in that it may result in a value set expansion giving a different list of codes that is both wrong and unsafe, and implementers should only use this capability reluctantly. It primarily exists to deal with situations where specifications have fallen into decay as time passes. If the value is overridden, the version used SHALL explicitly be represented in the expansion parameters. Note that this is similar to the force-system-version parameter but applied to valuesets.",
    "type" : "canonical"
  },
  {
    "name" : "manifest",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "Specifies a manifest library that provides expansion rules for the operation. The library has an extension expansionParameters that references a contained Parameters resource that contains additional $expand parameters. See the [CRMI specification description of manifests]https://build.fhir.org/ig/HL7/crmi-ig/StructureDefinition-crmi-manifestlibrary.html) and [CRMI expansion rules](https://build.fhir.org/ig/HL7/crmi-ig/artifact-terminology-service.html#expansion-rules) for a complete description of how manifest values are used to provide defaults for expansion parameters. Parameters specified directly in a $validate-code operation override behaviors specified by the manifest parameter. It is an error to supply both a manifest and a manifestParameters.",
    "type" : "canonical",
    "targetProfile" : ["http://hl7.org/fhir/StructureDefinition/Library"]
  },
  {
    "name" : "manifestParameters",
    "use" : "in",
    "min" : 0,
    "max" : "1",
    "documentation" : "Specifies manifest parameters that provide expansion rules for the operation. See the description of manifest parameters for a complete description of how manifest values are used to provide defaults for expansion parameters. Parameters specified directly in a $validate-code operation override behaviors specified by the manifest parameter. It is an error to supply both a manifest and a manifestParameters.",
    "type": "Parameters"
  },
  {
    "name" : "tx-resource",
    "use" : "in",
    "min" : 0,
    "max" : "*",
    "documentation" : "One or more additional resources that are referred to from the value set provided with the $expand or $validate-code invocation. These may be additional value sets or code systems that the client believes will or may be necessary to perform the operation. Resources provided in this fashion are used preferentially to those known to the system, though servers may return an error if these resources are already known to the server (by URL and version) but differ from that information on the server.",
    "type" : "Resource"
  },
  {
    "name" : "result",
    "use" : "out",
    "min" : 1,
    "max" : "1",
    "documentation" : "True if the concept details supplied are valid",
    "type" : "boolean"
  },
  {
    "name" : "message",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "documentation" : "Error details, if result = false. If this is provided when result = true, the message carries hints and warnings",
    "type" : "string"
  },
  {
    "name" : "display",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "documentation" : "A valid display for the concept if the system wishes to display this to a user",
    "type" : "string"
  },
  {
    "name" : "code",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "documentation" : "The code that was validated",
    "type" : "code"
  },
  {
    "name" : "system",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "documentation" : "The system for the code that was validated",
    "type" : "uri"
  },
  {
    "name" : "version",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "documentation" : "The version of the system of the code that was validated",
    "type" : "string"
  },
  {
    "name" : "codeableConcept",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "documentation" : "A codeableConcept containing codings for all the validated codes",
    "type" : "CodeableConcept"
  },
  {
    "name" : "issues",
    "use" : "out",
    "min" : 0,
    "max" : "1",
    "documentation" : "List of itemised issues with paths constrained to simple FHIRPath. Examples are CodeableConcept, CodeableConcept.coding[0], CodeableConcept.coding[1].display, or Coding.display",
    "type" : "OperationOutcome"
  }]
}